y_new <- b_0 + b_1*x_new
print(y_new)
head(longley)
?longley
head(longley)
df <- longley %>% select(GNP, Employed)
cor(df$GNP, df$Employed)
scatter.smooth(df$GNP, df$Employed)
rls <- lm(Employed ~ GNP, data = df)
b0 <- rls$coefficients[1]
b1 <- rls$coefficients[2]
x_nueva <- 75
b0 + b1*x_nueva
head(longley)
# y = b_0 + b_1*x_1 + b_2*x_2 * b_3*x_3 + b_4*x_4
lm(Employed ~ GNP + Armed.Forces + Unemployed + Population,
data = longley)
head(mtcars)
ggplot(mtcars, aes(mpg, hp)) + geom_point(color = 'blue') + geom_smooth(method = 'lm')
ggplot(mtcars, aes(mpg, hp)) +
geom_point(color = 'blue') +
geom_smooth(method = 'lm')
ggplot(mtcars, aes(mpg, hp)) +
geom_point(color = 'blue') +
geom_smooth(method = 'lm', se = FALSE)
?geom_smooth
head(iris)
str(iris)
unique(iris$Species)
# Generamos números aleatorios de tamaño 0.9*tamaño iris
nrow(iris)
# Generamos números aleatorios de tamaño 0.9*tamaño iris
1:nrow(iris)
random <- sample(1:nrow(iris),
size = 0.8 * nrow(iris))
random
# Generamos números aleatorios de tamaño 0.9*tamaño iris
set.seed(149213)
random <- sample(1:nrow(iris),
size = 0.8 * nrow(iris))
random
# train: x's
iris_train <- iris[random, ]
iris_train
str(iris_train)
# test
iris_test <- iris[-random, ]
str(iris_test)
head(iris_train)
# train:
iris_categoria_train <- iris[random, 'Species']
iris_categoria_train
# test: y's
iris_categoria_test <- iris[-random, 'Species']
install.packages('class')
# train
iris_train <- iris[random, -5]
str(iris_train)
# train
iris_train <- iris[random, -5]
str(iris_train)
# test
iris_test <- iris[-random, -5]
str(iris_test)
# train:
iris_categoria_train <- iris[random, 'Species']
iris_categoria_train
# test: y's
iris_categoria_test <- iris[-random, 'Species']
#install.packages('class')
library(class)
predict <- knn(train = iris_train, #x's
test = iris_test, # x's
cl=iris_categoria_train, # y's
k = 3)
predict
head(iris_test)
head(iris_categoria_test)
head(predict)
head(iris_categoria_test)
#matriz de confusion
con_mat <- table(predict, iris_categoria_test)
con_mat
diamonds
diamonds
?diamonds
head(diamonds)
library(ggplot2)
diamonds
class(diamonds)
diamantes <- data.frame(diamonds)
class(diamantes)
str(diamantes)
0.85*nrow(diamantes)
random <- sample(1:nrow(diamantes),
size = 0.85*nrow(diamantes))
random
length(random)
diamantes_train <- diamantes[random, ]
diamantes_test <- diamantes[-random, ]
head(diamantes_test)
str(diamantes_test)
str(diamantes_train)
x <- c('carat','depth','z')
y <- c('cut')
diamantes_train_x <- diamantes_train[ , x]
diamantes_train_x <- diamantes_train[ , x]
diamantes_train_y <- diamantes_train[ , y]
head(diamantes_train_x)
head(diamantes_train_y)
diamantes_test_x <- diamantes_test[ , x]
diamantes_test_y <- diamantes_test[ , y]
library(class)
library(class)
predict <- knn(train = diamantes_train_x,
cl = diamantes_train_y,
test = diamantes_test_x ,
k = 6)
predict
con_mat <- table(predic,diamantes_categoria_test)
con_mat <- table(predict,diamantes_categoria_test)
con_mat <- table(predict,diamantes_test_y)
con_mat
vector.sorted.decreasing
rm(list = ls())
5+5
print('Hola Mundo')
5+6
5+5
print('Hola Mundo')
5+6
5+5
print('Hola Mundo')
5+6
5+5
print('Hola Mundo')
5+6
# Declaramos una variable de cada tipo de dato
5+5
# Declaramos una variable de cada tipo de dato
ingreso.mensual <- 5+5
ingreso.mensual
# Declaramos una variable de cada tipo de dato
ingreso.mensual <- 5+5
ingreso.mensual
variable.char <- "Hola R"
variable.num <- 3.1416
variable.int <- 149213L
variable.logical <- TRUE
# Imprimimos las clases de cada variable
class(variable.char)
# Imprimimos las clases de cada variable
class(variable.char)
print(class(variable.char))
# Imprimimos las clases de cada variable
class(variable.char)
class(variable.num)
class(variable.int)
class(variable.logical)
variable.logical <- True
variable.logical <- T
class(variable.logical)
variable.int <- 149213l
variable.int <- 149213
class(variable.int)
variable.int <- 149213L
variable.int <- 149213L
class(variable.int)
vector.nombres <- c('Ana', 'Salvador', 'Andres','Romel')
vector.edades <- c(10, 11, 15, 20)
vector.edades <- c(10, 11, 15, 20, 25)
vector.nombres <- c('Ana', 'Salvador', 'Andres','Romel')
class(vector.nombres)
type(vector.nombres)
class(vector.nombres)
class(vector.edades)
?c
?c
vector.nombres <- c('Ana', 'Salvador', 'Andrés','Romel')
class(vector.nombres)
vector.nombres <- c(vector.nombres, 'Edgar')
c(vector.nombres, vector.nombres.nuevos)
vector.nombres.nuevos <- c('Edgar','Hazael')
c(vector.nombres, vector.nombres.nuevos)
vector.nombres.nuevos <- c('Edgar','Hazael')
vector.nombres.nuevos
?seq
seq(from = 1, to = 4, by =1)
seq(from = 1, to = 1000, by =5)
seq(from = 10, to = 1000, by =5)
# Para crear un vector con secuencia
vector.seq.bytwo <- seq(from=1, to = 10, by=2)
vector.seq.bytwo
vector.seq.negative <- seq(from = 10, to = 1, by=-1)
vector.seq.negative
vector.seq.negative <- seq(from = 10, to = 1, by=-5)
vector.seq.negative
# Para crear un vector con valores repetidos
vector.rep <- rep(x=1, times = 100)
vector.rep
vector.rep.each <- rep(x = c(1,2), each = 3)
vector.rep.each
vector.rep.each <- rep(x = c(1,2), times = 3)
vector.rep.each
vector.rep.each <- rep(x = c(1,2,3), each = 3)
vector.rep.each
rep(x = c(2,3), each = 4, times = 6)
rep(x = c(2,3), times = 6, each = 4)
vector.seq <- seq(from = 100, to =0, by= -3)
vector.seq
c(vector.rep.complete, vector.seq)
vector.rep.complete <- rep(x = c(2,3), each = 4, times = 6)
vector.seq <- seq(from = 100, to =0, by= -3)
c(vector.rep.complete, vector.seq)
vector.final <- c(vector.rep.complete, vector.seq)
vector.final
# Para ordenar ascendente y descendente un vector
vector.sorted.increasing <- sort(vector.final)
vector.sorted.increasing
vector.sorted.decreasing <- sort(vector.final,
decreasing = TRUE)
print(vector.sorted.decreasing)
# Para ver el tamaño de un vector
length(vector.sorted.decreasing)
vector.multiply.four <- vector.sorted*4
vector.edades
vector.edades + 2
vector.edades*6
vector.final
# Para extraer el primer elemento de un vector
vector.multiply.four[0]
vector.final[1]
# Para extraer el primer elemento de un vector
vector.final[2:5]
# Para extraer el primer y tercer elemento
vector.final[c(1,3,16)]
vector.final[-1]
vector.final[-6]
vector.final
vector.final[-73]
# Para extraer el último elemento del vector
loc.last <- length(vector.final)
loc.last
vector.final[82]
vector.final[loc.last]
vector.final[-loc.last]
# Para extraer el último elemento del vector
vector.final[length(vector.final)]
# Para extraer el último elemento del vector
vector.final[-length(vector.final)]
vector.new <- vector.final[-73]
length(vector.new)
vector.new[73]
vector.final[-73]
vector.final
vector.new
vector.new[1]
vector.new[1] <- 8
vector.new
rm(vector.new)
vector.new
rm(c(vector.final, vector.edades))
rm(vector.final, vector.edades)
ls()
rm(list = ls())
ls()
5+5
4+4+
10
# Utilizaremos el dataset iris
iris
# Para ver el número de renglones de un dataframe utilizamos nrow
nrow(iris)
# Para ver el número de columnas de un dataframe utilizamos ncol
ncol(iris)
# Para ver el número de renglones y columnas de un dataframe utilizamos dim
dim(iris)
# Utilizamos paste para imprimir texto y el resultado de código
paste('El número de columnas de nuestro dataframe es:', ncol(iris))
# Para ver el número de columnas de un dataframe utilizamos ncol
ncol(iris)
# Utilizamos paste para imprimir texto y el resultado de código
paste('El número de columnas de nuestro dataframe es:', ncol(iris))
paste('El número de renglones de nuesrtro dataframe es:', nrow(iris))
# Para ver el nombre de las columnas utilizamos names
names(iris)
colnames(iris)
iris
# Para traer un elemento de un dataframe debemos darle la ubicación
# Primer renglón, primer columna
iris[ 1 , 1 ]
# Tercer renglón, segunda columna
iris[3 , 2]
# Para traer renglones completos de un dataframe
# El primer renglón utilizando el número de renglón que es
iris[ 1 , ]
# Los tres primeros renglones
iris[ 6:12 , ]
# Todos los renglones menos el primero
iris[-1, ]
# Para traer columnas completas de un dataframe
# La primer columna por el número de columna que es
iris[ , 1 ]
names(iris)
# La primer columna por el nombre de columna que es
iris[ ,"Sepal.Length"]
# La primer columna por el nombre de columna que es
iris$Sepal.Length
# La primer columna por el nombre de columna que es
iris[ ,c("Sepal.Length",'Petal.Width')]
# Para traer columnas completas de un dataframe
# La primer columna por el número de columna que es
iris[ ,c( 1,5) ]
# Las primeras dos columnas
iris[ ,3:5]
names(iris)
# La primer columna por el nombre de columna que es
iris$Sepal.Length
# La primer columna por el nombre de columna que es
iris[  ,c("Sepal.Length",'Sepal.Width')]
# Las primeras dos columnas
iris[ ,3:5]
# La primer columna por el nombre de columna que es
iris[  ,c("Sepal.Length",'Sepal.Width',5)]
names(iiris
)
names(iris)
# Para traer columnas completas de un dataframe
# La primer columna por el número de columna que es
iris[  ,  c(1,2) ]
# Para traer elementos segun renglones y columnas
# Primer renglón, dos primeras columnas
iris[ 1 , 1:2]
iris[1, c('Sepal.Length', 'Sepal.Width')]
# Primeros tres renglones, dos últimas columnas
iris[1:3, 2:3]
# Primeros tres renglones, primer y última columna
iris[1:3, c(1,3)]
iris[1:3, c('Sepal.Length', 'Petal.Length')]
iris
# Para agreger un nuevo renglón utilizamos rbind
data.frame(Sepal.Length = c(6,7),
Sepal.Width = c(2.5,3.5),
Petal.Length = c(3,3),
Petal.Width = c(0.01,2.08),
Species = c('virginica','versicolor'))
# Para agreger un nuevo renglón utilizamos rbind
data.frame(Sepal.Length = c(6,7),
Sepal.Width = c(2.5,3.5),
Petal.Length = c(3,3),
Petal.Width = c(0.01,2.08),
Species = c('virginica','versicolor','virgnica'))
# Para agreger un nuevo renglón utilizamos rbind
data.frame(Sepal.Length = c(6,7),
Sepal.Width = c(2.5,3.5),
Petal.Length = c(3,3),
Petal.Width = c(0.01,2.08),
Species = c('virginica','versicolor')
)
# Para agreger un nuevo renglón utilizamos rbind
iris.parte2 <- data.frame(Sepal.Length = c(6,7),
Sepal.Width = c(2.5,3.5),
Petal.Length = c(3,3),
Petal.Width = c(0.01,2.08),
Species = c('virginica','versicolor')
)
iris
iris.parte2
# Para agreger un nuevo renglón utilizamos rbind
data.frame(Sepal.Length = c(6,7),
Sepal.Width = c(2.5,3.5),
Petal.Length = c(3,3),
Petal.Width = c(0.01,2.08),
Species = c('virginica','versicolor')
)
# Para agreger un nuevo renglón utilizamos rbind
iris.parte2 <- data.frame(Sepal.Length = c(6,7),
Sepal.Width = c(2.5,3.5),
Petal.Length = c(3,3),
Petal.Width = c(0.01,2.08),
Species = c('virginica','versicolor')
)
iris.parte2
df.iris <- rbind(iris, iris.parte2)
df.iris
# Para ver los primeros 8 elementos del dataframe
head(iris)
# Para ver los primeros 8 elementos del dataframe
head(iris,2)
# Para ver los ultimos 6 elementos del dataframe
tail(iris)
# Para ver los ultimos 6 elementos del dataframe
tail(iris,1)
unique(iris$Species)
# Cambiar los nombres de las columnas
names(iris)
# Cambiar los nombres de las columnas
names(iris)
names(iris) <- c("Longitud.Sepalo","Ancho.Sepalo","Longitud.Petalo","Ancho.Petalo","Especies")
head(iris)
tail(iris, 3)
tail(df.iris)
# Cambiar los nombres de las columnas
names(iris)
# Cambiar los nombres de las columnas
head(iris)
names(iris)
names(iris) <- c("Sepal.Width",
"Sepal.Length",
"Petal.Width",
"Petal.Length",
"Species")
tail(iris)
head(iris)
data("iris")
iris
data('iris')
mtcars
head(mtcars)
?mtcars
# Esto es un comentario
iris[2]
iris$Species <- NULL
head(iris,3)
data(iris)
head(iris)
names(mtcars)
mtcars[ ,2]
# Estadísticos básicos
iris$Sepal.Length
# Estadísticos básicos
iris$Sepal.Length[1:5]
min(iris$Sepal.Length)
mean(iris$Sepal.Length)
max(iris$Sepal.Length)
median(iris$Sepal.Length)
mode(iris$Sepal.Length)
mean(c(6, 7, 9, 9))
meadiana(c(6, 7, 9, 9, 6))
meadian(c(6, 7, 9, 9, 6))
median(c(6, 7, 9, 9, 6))
median(c(2, 9, 9, 9, 9))
mean(c(2, 9, 9, 9, 9))
# Operadores relacionales
10 > 10
10 < 10
10 <= 10
10 >= 10
10 != 10
10 == 10
# Podemos comparar los valores de las columnas de un dataframe
iris$Sepal.Width > 2
# Podemos comparar los valores de las columnas de un dataframe
iris$Sepal.Width > 3
# Podemos usar la comparación para filtrar un dataframe
iris[ iris$Sepal.Width > 3 , ]
iris$Sepal.Width
# Podemos comparar los valores de las columnas de un dataframe
iris$Sepal.Width > 3
# Podemos usar la comparación para filtrar un dataframe
iris[iris$Sepal.Width > 3 ,  ]
# Podemos usar la comparación para filtrar un dataframe
iris[iris$Sepal.Width > 3 ,  5]
# Podemos usar la comparación para filtrar un dataframe
iris[iris$Sepal.Width > 3 , ]
# Para ver la estructura de un dataframe
str(iris)
# Para ver los estadísticos básicos de las columnas de un dataframe
summary(iris)
data()
data(iris)
data()
mtcars
?mtcars
c(-1,0,1) <= 0
c(-1,0,1) >= 0
(c(-1,0,1) >= 0) & (c(-1,0,1) <= 0)
rm(list= ls())
# Para ver la ruta de dónde estamos trabajando
getwd()
setwd("C:/Users/AnaLuisaOrtegaRenter/Desktop/Cursos-Al/BEDU_June2020/Repository/Programming-Statistics-with-R/Data")
setwd('C:/Users/AnaLuisaOrtegaRenter/Desktop/Cursos-Al/BEDU_June2020/Repository/Programming-Statistics-with-R/Data')
read.csv('Metro_Interstate_Traffic_Volume.csv')
df <- read.csv('Metro_Interstate_Traffic_Volume.csv')
head(df)
Metro_Interstate_Traffic_Volume <- read.csv("C:/Users/AnaLuisaOrtegaRenter/Desktop/Cursos-Al/BEDU_June2020/Repository/Programming-Statistics-with-R/Data/Metro_Interstate_Traffic_Volume.csv")
View(Metro_Interstate_Traffic_Volume)
dfgit <- read.csv('https://raw.githubusercontent.com/analuisaortega/Programming-Statistics-with-R/master/Data/Metro_Interstate_Traffic_Volume.csv')
head(dfgit)
5 < 1 & 5==5
5 < 1 & 5 == 5
5 < 1 && 5 == 5
5 < 1
x < 1
x <- 5
x <- 5
x < 1
x == 5
x < 1 & x == 5
x > 1
x > 1 & x == 5
x < 1
x == 5
x < 1 | x == 5
x < 1 | x == 5
x < 1 | x == 5
(c(-1,0,1) >= 0)
(c(-1,0,1) <= 0)
# Ejemplo de la diferencia entre & y &&
(c(-1,0,1) >= 0) & (c(-1,0,1) <= 0)
(c(-1,0,1) >= 0) && (c(-1,0,1) <= 0)
data()
